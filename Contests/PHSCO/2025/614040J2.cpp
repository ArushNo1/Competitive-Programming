#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops") 
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace __gnu_pbds;
using namespace std;

typedef tree<int,null_type,less<int>,rb_tree_tag,
tree_order_statistics_node_update> indexed_set;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll, ll> pll;

#define endll '\n'

#define all(x) (x).begin(), (x).end()

#define MOD ll(1e9+7)
#define inf int(1e9+1)
#define INF ll(1e18+1)

template <typename T>
inline void fillv(vector<T>& v, int n) {
    for (int i = 0; i < n; ++i) {
        std::cin >> v[i];
    }
}

inline void open(string name){
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
}    

//comment to enable debugging
#define dbg(x)

#ifndef dbg
#define dbg(x) cerr << __LINE__ << ": " << #x << "=" << x << endl;
//edit for specific DS
#endif
#include "cp-templates/Debugging/alldebug.h"

vector<vector<int>> ciphertext = {
    {27, 43, 52, 66, 78, 91, 98, 115, 117, 130, 141, 151, 161, 172, 177, 193, 201, 209, 221, 232, 241},
    {44, 59, 67, 80, 91, 103, 109, 125, 127, 140, 150, 160, 169, 179, 184, 199, 206, 213, 224, 234, 242},
    {51, 65, 73, 86, 97, 109, 115, 130, 132, 145, 154, 163, 171, 181, 186, 200, 207, 214, 225, 235, 243},
    {65, 78, 86, 98, 108, 119, 125, 139, 141, 153, 161, 170, 177, 186, 191, 204, 211, 217, 227, 236, 244},
    {77, 89, 97, 108, 117, 127, 133, 146, 148, 160, 167, 176, 182, 191, 196, 208, 215, 220, 229, 237, 245},
    {89, 100, 108, 118, 126, 135, 141, 153, 155, 167, 174, 182, 188, 196, 201, 212, 219, 223, 231, 238, 246},
    {94, 104, 112, 122, 130, 139, 145, 156, 158, 170, 177, 185, 191, 198, 203, 213, 220, 224, 232, 239, 247},
    {111, 120, 127, 136, 143, 151, 156, 166, 168, 179, 186, 193, 199, 205, 210, 219, 225, 228, 235, 241, 248},
    {115, 124, 131, 140, 147, 155, 160, 170, 172, 182, 188, 195, 200, 205, 210, 219, 225, 228, 235, 241, 248},
    {129, 137, 143, 151, 158, 165, 169, 178, 179, 188, 193, 199, 203, 208, 212, 220, 226, 229, 236, 241, 248},
    {140, 148, 153, 160, 166, 173, 177, 186, 186, 194, 198, 204, 208, 213, 217, 224, 229, 232, 238, 242, 248},
    {152, 159, 163, 169, 175, 181, 184, 192, 192, 199, 203, 209, 213, 217, 221, 228, 233, 235, 241, 244, 249},
    {161, 168, 171, 176, 181, 186, 188, 196, 196, 203, 207, 213, 217, 221, 225, 231, 236, 237, 242, 245, 249},
    {169, 176, 178, 183, 188, 193, 195, 202, 202, 209, 213, 218, 222, 225, 229, 234, 239, 239, 244, 247, 250},
    {174, 181, 183, 188, 193, 198, 200, 207, 207, 213, 217, 222, 225, 228, 231, 236, 241, 241, 245, 248, 251},
    {189, 195, 196, 200, 204, 208, 209, 215, 215, 220, 224, 228, 230, 233, 235, 239, 243, 243, 246, 249, 252},
    {200, 205, 206, 210, 214, 218, 219, 224, 224, 228, 231, 235, 236, 238, 239, 243, 246, 246, 248, 250, 252},
    {213, 217, 218, 221, 224, 227, 228, 232, 232, 235, 238, 241, 241, 243, 243, 246, 248, 248, 250, 252, 253},
    {225, 228, 229, 231, 233, 235, 236, 239, 239, 242, 244, 246, 246, 248, 248, 250, 251, 251, 252, 253, 253},
    {237, 239, 240, 241, 242, 243, 244, 246, 246, 248, 249, 250, 250, 251, 251, 253, 254, 254, 254, 254, 254},
    {243, 244, 245, 246, 247, 248, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 254, 254, 254, 254}
};

/*
[
  [228 212 203 189 177 164 157 140 138 125 114 104 94 83 78 62 54 46 34 23 14 ]
  [211 196 188 175 164 152 146 130 128 115 105 95 86 76 71 56 49 42 31 21 13 ]
  [204 190 182 169 158 146 140 125 123 110 101 92 84 74 69 55 48 41 30 20 12 ]
  [190 177 169 157 147 136 130 116 114 102 94 85 78 69 64 51 44 38 28 19 11 ]
  [178 166 158 147 138 128 122 109 107 95 88 79 73 64 59 47 40 35 26 18 10 ]
  [166 155 147 137 129 120 114 102 100 88 81 73 67 59 54 43 36 32 24 17 9 ]
  [161 151 143 133 125 116 110 99 97 85 78 70 64 57 52 42 35 31 23 16 8 ]
  [144 135 128 119 112 104 99 89 87 76 69 62 56 50 45 36 30 27 20 14 7 ]
  [140 131 124 115 108 100 95 85 83 73 67 60 55 50 45 36 30 27 20 14 7 ]
  [126 118 112 104 97 90 86 77 76 67 62 56 52 47 43 35 29 26 19 14 7 ]
  [115 107 102 95 89 82 78 69 69 61 57 51 47 42 38 31 26 23 17 13 7 ]
  [103 96 92 86 80 74 71 63 63 56 52 46 42 38 34 27 22 20 14 11 6 ]
  [94 87 84 79 74 69 67 59 59 52 48 42 38 34 30 24 19 18 13 10 6 ]
  [86 79 77 72 67 62 60 53 53 46 42 37 33 30 26 21 16 16 11 8 5 ]
  [81 74 72 67 62 57 55 48 48 42 38 33 30 27 24 19 14 14 10 7 4 ]
  [66 60 59 55 51 47 46 40 40 35 31 27 25 22 20 16 12 12 9 6 3 ]
  [55 50 49 45 41 37 36 31 31 27 24 20 19 17 16 12 9 9 7 5 3 ]
  [42 38 37 34 31 28 27 23 23 20 17 14 14 12 12 9 7 7 5 3 2 ]
  [30 27 26 24 22 20 19 16 16 13 11 9 9 7 7 5 4 4 3 2 2 ]
  [18 16 15 14 13 12 11 9 9 7 6 5 5 4 4 2 1 1 1 1 1 ]
  [12 11 10 9 8 7 6 5 5 4 4 3 3 2 2 1 1 1 1 1 1 ]
]

*/

void solve(int num_tc)
{
    int n = ciphertext.size();
    int m = ciphertext[0].size();
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            ciphertext[i][j] = 255 - ciphertext[i][j];
        }
    }    
    vvi ans(n, vi(m));
    for(int j = m - 1; j >= 0; j--){
        if(j == m - 1){
            ans[n - 1][j] = ciphertext[n - 1][j];
        }
        else{
            ans[n - 1][j] = ciphertext[n - 1][j] - ciphertext[n - 1][j + 1];
        }
        for(int i = n - 2; i >= 0; i--){
            ans[i][j] = ciphertext[i][j] - ciphertext[i + 1][j] - ciphertext[i][j + 1] + ciphertext[i + 1][j + 1];
        }
    }
    cout << ans << endll;
}

int32_t main()
{
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);  
    dbg("turn off debugging");
    ll T = 1;
    //cin >> T;
    for(ll t = 0; t < T; t++){
        solve(t+1);
    }
}
